#!/bin/bash

# if environment variable is not set, use default
if [ -z "$SLAMP_HOOKS" ]; then
# if "SLAMP_INSTALL_DIR" is set
    if [ -n "$SLAMP_INSTALL_DIR" ]; then
        SLAMP_HOOKS="$SLAMP_INSTALL_DIR/runtime/libslamp_hooks_custom.a -L$SLAMP_INSTALL_DIR/lib -lmalloc_hook"
    else
        echo "SLAMP_INSTALL_DIR is not set"
        exit 1
    fi
fi
if [ -z "$CONSUMER_BINARY" ]; then
    if [ -n "$SLAMP_INSTALL_DIR" ]; then
        CONSUMER_BINARY="$SLAMP_INSTALL_DIR/bin/consumer_custom"
    else
        echo "SLAMP_INSTALL_DIR is not set"
        exit 1
    fi
fi
if [ -z "$SLAMP_LIB_PATH" ]; then
    if [ -n "$SLAMP_INSTALL_DIR" ]; then
        SLAMP_LIB_PATH="$SLAMP_INSTALL_DIR/lib/libSLAMP.so"
    else
        echo "SLAMP_INSTALL_DIR is not set"
        exit 1
    fi
fi

# EXTRA="-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa -objc-arc-aa -scoped-noalias -veto -nander"
EXTRA="-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -objc-arc-aa -scoped-noalias -veto -nander"
# -load $SCAF_LIBS_DIR/libSpeculationModules.so
SLAMP_LIBS="
 -load $NOELLE_LIBS_DIR/CallGraph.so
 -load $NOELLE_LIBS_DIR/libSvf.so
 -load $NOELLE_LIBS_DIR/libCudd.so -stat=false
 -load $SCAF_LIBS_DIR/libSCAFUtilities.so
 -load $SCAF_LIBS_DIR/libMemoryAnalysisModules.so
 -load $SCAF_LIBS_DIR/libLoopProf.so
 -load $SCAF_LIBS_DIR/libLAMPLoad.so
 -load $NOELLE_LIBS_DIR/AllocAA.so
 -load $NOELLE_LIBS_DIR/TalkDown.so
 -load $NOELLE_LIBS_DIR/CallGraph.so
 -load $NOELLE_LIBS_DIR/PDGAnalysis.so
 -load $NOELLE_LIBS_DIR/Architecture.so
 -load $NOELLE_LIBS_DIR/BasicUtilities.so
 -load $NOELLE_LIBS_DIR/Task.so
 -load $NOELLE_LIBS_DIR/DataFlow.so
 -load $NOELLE_LIBS_DIR/HotProfiler.so
 -load $NOELLE_LIBS_DIR/LoopStructure.so
 -load $NOELLE_LIBS_DIR/Invariants.so
 -load $NOELLE_LIBS_DIR/InductionVariables.so
 -load $NOELLE_LIBS_DIR/Loops.so
 -load $NOELLE_LIBS_DIR/Scheduler.so
 -load $NOELLE_LIBS_DIR/OutlinerPass.so
 -load $NOELLE_LIBS_DIR/MetadataManager.so
 -load $NOELLE_LIBS_DIR/LoopTransformer.so
 -load $NOELLE_LIBS_DIR/Noelle.so
 -load $SLAMP_LIB_PATH
 -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa $EXTRA -llvm-aa-results "
 #  -pdgbuilder

function drive {
  # $1: .bc file
  # $2: target fcn
  # $3: target loop

  local SLAMP_OUTFILE="$2-$3.result.slamp.profile"
  local OPTS="-slamp-insts -slamp-target-fn=$2 -slamp-target-loop=$3 $EXTRA_FLAGS -slamp-outfile=$SLAMP_OUTFILE"

  local PRELINK_BC="`basename $1 .bc`.slamp.prelink.bc"
  local PRELINK_OBJ="`basename $1 .bc`.slamp.prelink.o"
  # if EXE is in environment variable, use it
  if [[ x$EXE != x ]]; then
      EXE=$EXE
  else
      # EXE="`basename $1 .bc`.slamp.prompt.exe"
      # EXE="`basename $1 .bc`.slamp.prompt-noinline.exe"
      EXE="`basename $1 .bc`.slamp.exe"
  fi

  if [[ x$DEBUG != x ]]; then
    OPTS+=" -debug-only=$DEBUG"
  fi

  local CMD1="opt $SLAMP_LIBS $OPTS -o $PRELINK_BC $1"
  local CMD2="clang -c -o $PRELINK_OBJ $PRELINK_BC"
  local CMD3="clang++ -no-pie  -O2 $PRELINK_OBJ $SLAMP_HOOKS -o $EXE -g $LINKING_OPTS -lunwind $DEFAULT_LIBS -ldl -lutil  -lpthread -lrt"
  local CMD4="stdbuf -o0 -e0 ./$EXE $PROFILEARGS"
  # if RUNTIME_LTO == "ON" then add -flto to CMD2 and CMD3
  if [[ x$RUNTIME_LTO == xON ]]; then
      CMD2+=" -flto"
      CMD3+=" -flto"
  fi

  red='\e[0;31m'
  nc='\e[0m'
  echo -e "${red}>>> slamp-driver Processing $2::$3${nc}"
  echo -e "${red}    --- Generate Simulator...${nc}"
  echo $CMD1
  $CMD1
  echo $CMD2
  $CMD2
  echo $CMD3
  $CMD3
  echo $CMD3

  echo -e "${red}    --- Run Simulator...${nc}"
  rm -f /dev/shm/MySharedMemory2 /dev/shm/MySharedMemory

  # create a random number between 0 and 999
  slamp_queue_id=$(($RANDOM%1000))

  # check if /dev/shm/slamp_queue_$id exists and if so, create a new random number
  while [ -e /dev/shm/slamp_queue_$slamp_queue_id ]; do
      slamp_queue_id=$(($RANDOM%1000))
  done

  echo "SLAMP_QUEUE_ID=$slamp_queue_id /usr/bin/time -v $CONSUMER_BINARY &"
  SLAMP_QUEUE_ID=$slamp_queue_id /usr/bin/time -v $CONSUMER_BINARY &
  CONSUME_PID=$!
  echo "timeout $RUN_TIMEOUT SLAMP_QUEUE_ID=$slamp_queue_id $CMD4"
  # if regression-watchdog is an executable, use it
  if [[ -x regression-watchdog ]]; then
      RUN_TIMEOUT=7200 # 2 hours
      SLAMP_QUEUE_ID=$slamp_queue_id eval /usr/bin/time -v regressions-watchdog $RUN_TIMEOUT slamp.time $CMD4
  else
      SLAMP_QUEUE_ID=$slamp_queue_id eval /usr/bin/time -v $CMD4
  fi

  # eval regressions-watchdog $RUN_TIMEOUT slamp-smtx.time $CMD4
  # if command fail
  if [ $? -ne 0 ]; then
      # print in red
      kill -9 $CONSUME_PID
      echo -e "${red}    --- SIMULATION FAILED${nc}"
      echo "Timed out or other problems"
      rm -f result.slamp.profile
      rm -f /dev/shm/slamp_queue_$slamp_queue_id
      exit 1
  else
      # sleep for 20 seconds
      sleep 10
      # sleep 0
      cat deplog*.txt >> result.slamp.profile
      rm -f deplog*.txt
      rm -f /dev/shm/slamp_queue_$slamp_queue_id
  fi

  if [[ x$LOCALWRITE_THREADS != x ]]; then
      # combine files
      combine_localwrite.py $2 $3
  fi

  # if there's file called points_to.profile, prefix it with $2-$3
  if [[ -f points_to.profile ]]; then
      mv points_to.profile $2-$3.points_to.profile
  fi
  # rm -f $SLAMP_OUTFILE $PRELINK_BC $PRELINK_OBJ $EXE
}

# $1 is the bc file
# $2 is the function name
# $3 is the loop id
if [[ x$1 == x ]]; then
  echo "Usage: $0 <bc file> [<function name> <loop id>]"
  exit 1
fi

# if $2 and $3 are set, run driver on $1 $2 $3
if [[ x$2 != x && x$3 != x ]]; then
    # create a new bc name with .named.bc
    NAMED_BC="`basename $1 .bc`.named.bc"
    opt $1 -o $NAMED_BC $SLAMP_LIBS -metadata-namer
    drive $NAMED_BC $2 $3
else
    # Check if both $SCAF_LIBS_DIR and $LIBERTY_LIBS_DIR are set
    # if any of them is not set, exit with error
    if [[ x$SCAF_LIBS_DIR == x || x$LIBERTY_LIBS_DIR == x ]]; then
        echo "SCAF_LIBS_DIR and LIBERTY_LIBS_DIR must be set to use loop profile"
        exit 1
    fi

    # otherwise, use loop profile and run all different loops
    # Determine if the user specified a function
    FCN=
    if [[ x$2 != x ]]
    then
      FCN="-target-fcn=$2"
    fi

    # Determine if the user specified a loop
    LOOP=
    if [[ x$3 != x ]]
    then
      LOOP="-target-loop=$3"
    fi

    LIBS="-load $SCAF_LIBS_DIR/libSCAFUtilities.so
          -load $LIBERTY_LIBS_DIR/libUtil.so
          -load $LIBERTY_LIBS_DIR/libLoopProf.so"
    OPTS="-targets "

    CMD="$PREFIX opt $LIBS $OPTS $FCN $LOOP $LIST $1"

    echo Running: $CMD
    #ulimit -S -v $[100*1024*1024]
    $CMD > /dev/null 2> __targets.txt

    declare -a lines
    let i=0
    while IFS=$'\n' read -r line_data; do
      lines[i]="${line_data}"
      ((++i))
    done < __targets.txt

    let i=0
    while (( ${#lines[@]} > i )); do
      IFS=' ' read -a array <<< ${lines[i++]}
      if [ ${array[0]} == "-" ]; then
        drive $1 ${array[1]} ${array[3]}
      fi
    done
fi

#rm -f __targets.txt
